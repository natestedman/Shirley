// Shirley
// Written in 2016 by Nate Stedman <nate@natestedman.com>
//
// To the extent possible under law, the author(s) have dedicated all copyright and
// related and neighboring rights to this software to the public domain worldwide.
// This software is distributed without any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication along with
// this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

import Foundation
import ReactiveSwift

extension SessionProtocol where Value: MessageProtocol, Value.Response == URLResponse, Error == NSError
{
    // MARK: - HTTP Response Session
    
    /// Returns a transformed session, converting `NSURLResponse` to `NSHTTPURLResponse`.
    ///
    /// If a conversion cannot be made, the signal producer will send a `.Failed` event, with `SessionError`'s
    /// `.NotHTTPResponse` converted to an `NSError` object.
    ///
    /// This function is only available when `Value` is `MessageProtocol`, with a `Response` type of `NSURLResponse`, and
    /// `Requester.Error` is `NSError`.
    public var httpResponse: Session<Request, Message<HTTPURLResponse, Value.Body>, Error>
    {
        return flatMapValues(.concat, transform: { message in
            (message.response as? HTTPURLResponse).map({ HTTP in
                SignalProducer(value: Message(response: HTTP, body: message.body))
            }) ?? SignalProducer(error: SessionError.notHTTPResponse.NSError)
        })
    }
}

/// The domain for errors generated by `SessionProtocol.raiseHTTPErrors`.
public let SessionHTTPErrorDomain = "Shirley.SessionHTTPErrorDomain"

extension SessionProtocol where Value: MessageProtocol, Value.Response == HTTPURLResponse, Error == NSError
{
    // MARK: - HTTP Errors

    /**
     Converts message values with HTTP error responses into failure events.

     - parameter userInfo: An optional function to provide custom user info values for the error. By default, a
                           localized description is provided, but if a different localized description is included in
                           the dictionary returned from a function passed to this parameter, it will be overridden.
     */
    public func raiseHTTPErrors(userInfo: ((Value.Response, Value.Body) -> [String:Any])? = nil)
        -> Session<Request, Value, Error>
    {
        return flatMapValues(.concat, transform: { message in
            let statusCode = message.response.statusCode

            if statusCode >= 400
            {
                var baseUserInfo: [String:Any] = [
                    NSLocalizedDescriptionKey: HTTPURLResponse.localizedString(forStatusCode: statusCode)
                ]

                if let extraUserInfo = userInfo?(message.response, message.body)
                {
                    for (key, value) in extraUserInfo
                    {
                        baseUserInfo[key] = value
                    }
                }

                return SignalProducer(error: NSError(
                    domain: SessionHTTPErrorDomain,
                    code: statusCode,
                    userInfo: baseUserInfo
                ))
            }
            else
            {
                return SignalProducer(value: message)
            }
        })
    }
}
